{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.3", "generated_at": "2025-07-07T11:04:58.359217Z", "invocation_id": "fb3aa1f8-10dd-46af-a745-7662f3cb35c1", "invocation_started_at": "2025-07-07T11:04:52.394529Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-07T11:04:58.292261Z", "completed_at": "2025-07-07T11:04:58.336582Z"}, {"name": "execute", "started_at": "2025-07-07T11:04:58.337344Z", "completed_at": "2025-07-07T11:04:58.337366Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05707359313964844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gasag.last_day_exceptions", "compiled": true, "compiled_code": "WITH raw_data AS (\n    SELECT\n        Kraftwerk,\n        -- Parse German date format and convert to TIMESTAMP\n        PARSE_TIMESTAMP('%d.%m.%Y %H:%M', Timestamp) as Timestamp,\n        Zaehlerstand,\n        -- Calculate raw Leistung (including negative values)\n        Zaehlerstand - LAG(Zaehlerstand) OVER (PARTITION BY Kraftwerk ORDER BY PARSE_TIMESTAMP('%d.%m.%Y %H:%M', Timestamp)) AS raw_leistung\n    FROM `gasag-465208`.`raw`.`kraftwerksdaten_raw`\n),\n\nmax_date AS (\n    SELECT MAX(DATE(PARSE_TIMESTAMP('%d.%m.%Y %H:%M', Timestamp))) as last_date\n    FROM `gasag-465208`.`raw`.`kraftwerksdaten_raw`\n),\n\nlast_day_data AS (\n    SELECT\n        Kraftwerk,\n        Timestamp,\n        EXTRACT(HOUR FROM Timestamp) AS hour_of_day,\n        raw_leistung,\n        -- Flag for peak load (> 50MW)\n        CASE\n            WHEN raw_leistung > 50 THEN TRUE\n            ELSE FALSE\n        END AS is_peak_load,\n        -- Flag for negative Leistung\n        CASE\n            WHEN raw_leistung < 0 THEN TRUE\n            ELSE FALSE\n        END AS is_negative_leistung\n    FROM raw_data\n    WHERE DATE(Timestamp) = (SELECT last_date FROM max_date)\n)\n\nSELECT\n    hour_of_day,\n    Kraftwerk,\n    is_peak_load,\n    is_negative_leistung,\n    raw_leistung AS leistung\nFROM last_day_data\nWHERE raw_leistung IS NOT NULL  -- Only show rows with valid Leistung\nORDER BY hour_of_day, Kraftwerk", "relation_name": "`gasag-465208`.`raw`.`last_day_exceptions`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-07T11:04:58.308058Z", "completed_at": "2025-07-07T11:04:58.339455Z"}, {"name": "execute", "started_at": "2025-07-07T11:04:58.340413Z", "completed_at": "2025-07-07T11:04:58.340427Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05668520927429199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gasag.stg_kraftwerksdaten", "compiled": true, "compiled_code": "WITH raw_data AS (\n    SELECT\n        Kraftwerk,\n        -- Parse German date format and convert to TIMESTAMP\n        PARSE_TIMESTAMP('%d.%m.%Y %H:%M', Timestamp) as Timestamp,\n        Zaehlerstand,\n        -- Flag decreasing meter readings\n        CASE\n            WHEN LAG(Zaehlerstand) OVER (PARTITION BY Kraftwerk ORDER BY PARSE_TIMESTAMP('%d.%m.%Y %H:%M', Timestamp))\n            > Zaehlerstand\n            THEN TRUE\n            ELSE FALSE\n        END AS is_decreasing_zaehlerstand\n    FROM `gasag-465208`.`raw`.`kraftwerksdaten_raw`\n),\n\nmax_date AS (\n    SELECT MAX(DATE(PARSE_TIMESTAMP('%d.%m.%Y %H:%M', Timestamp))) as last_date\n    FROM `gasag-465208`.`raw`.`kraftwerksdaten_raw`\n),\n\ncleaned_data AS (\n    SELECT\n        Kraftwerk,\n        Timestamp,\n        Zaehlerstand,\n        is_decreasing_zaehlerstand,\n        -- Flag last day dynamically\n        CASE\n            WHEN DATE(Timestamp) = (SELECT last_date FROM max_date) THEN TRUE\n            ELSE FALSE\n        END AS is_last_day,\n        -- Calculate Leistung (NULL for decreasing readings or first timestamp)\n        CASE\n            WHEN is_decreasing_zaehlerstand THEN NULL\n            ELSE Zaehlerstand - LAG(Zaehlerstand) OVER (PARTITION BY Kraftwerk ORDER BY Timestamp)\n        END AS leistung\n    FROM raw_data\n)\n\nSELECT\n    Kraftwerk,\n    Timestamp,\n    Zaehlerstand,\n    is_decreasing_zaehlerstand,\n    is_last_day,\n    leistung,\n    -- Flag peak loads > 50MW (only for non-NULL Leistung)\n    CASE\n        WHEN leistung IS NOT NULL AND leistung > 50 THEN TRUE\n        ELSE FALSE\n    END AS is_peak_load\nFROM cleaned_data\nWHERE Timestamp > TIMESTAMP('2024-01-01 00:00:00')", "relation_name": "`gasag-465208`.`raw`.`stg_kraftwerksdaten`", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-07T11:04:58.347865Z", "completed_at": "2025-07-07T11:04:58.353152Z"}, {"name": "execute", "started_at": "2025-07-07T11:04:58.353838Z", "completed_at": "2025-07-07T11:04:58.353853Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01034998893737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.gasag.kraftwerke_metrics", "compiled": true, "compiled_code": "WITH staging_data AS (\n    SELECT * FROM `gasag-465208`.`raw`.`stg_kraftwerksdaten`\n),\n\n-- Historical metrics (excluding last day)\nhistorical_metrics AS (\n    SELECT\n        Kraftwerk,\n        -- Durchschnittliche Grundlast (average base load, excluding NULLs)\n        AVG(CASE WHEN NOT is_peak_load THEN leistung END) AS durchschnittliche_grundlast,\n\n        -- Durchschnittliche Spitzenlast (average peak load, excluding NULLs)\n        AVG(CASE WHEN is_peak_load THEN leistung END) AS durchschnittliche_spitzenlast,\n\n        -- Durchschnittliche Gesamtlast pro Tag (average total load, excluding NULLs)\n        AVG(leistung) AS durchschnittliche_gesamtlast_pro_tag,\n\n        -- Quote an Spitzenlasten (percentage of peak loads)\n        COUNT(CASE WHEN is_peak_load THEN 1 END) * 100.0 / COUNT(CASE WHEN leistung IS NOT NULL THEN 1 END) AS quote_spitzenlasten_prozent,\n\n        -- Quote an R\u00fcckl\u00e4ufigen Z\u00e4hlerst\u00e4nden (percentage of decreasing meter readings)\n        COUNT(CASE WHEN is_decreasing_zaehlerstand THEN 1 END) * 100.0 / COUNT(*) AS quote_ruecklaeufige_zaehlerstaende_prozent\n\n    FROM staging_data\n    WHERE NOT is_last_day\n    GROUP BY Kraftwerk\n),\n\n-- Last day metrics\nlast_day_metrics AS (\n    SELECT\n        Kraftwerk,\n        -- Sum of Leistung for the last day (excluding NULLs)\n        SUM(leistung) AS last_day_leistung_sum,\n        -- Count of hours with valid data for the last day\n        COUNT(CASE WHEN leistung IS NOT NULL THEN 1 END) AS last_day_hours_with_data,\n        -- Average Leistung for the last day (excluding NULLs)\n        AVG(leistung) AS last_day_durchschnitt_leistung\n    FROM staging_data\n    WHERE is_last_day\n    GROUP BY Kraftwerk\n),\n\n-- Expected vs actual comparison for last day\nlast_day_deviation AS (\n    SELECT\n        h.Kraftwerk,\n        h.durchschnittliche_gesamtlast_pro_tag,\n        l.last_day_leistung_sum,\n        l.last_day_hours_with_data,\n        l.last_day_durchschnitt_leistung,\n        -- Expected Leistung (summierte Leistung * 24 / \u00fcberlieferte Stunden)\n        CASE\n            WHEN l.last_day_hours_with_data > 0\n            THEN (l.last_day_leistung_sum * 24.0) / l.last_day_hours_with_data\n            ELSE NULL\n        END AS erwartete_leistung,\n        -- Tagesabweichung (Expected - Actual average)\n        CASE\n            WHEN l.last_day_hours_with_data > 0\n            THEN ((l.last_day_leistung_sum * 24.0) / l.last_day_hours_with_data) - h.durchschnittliche_gesamtlast_pro_tag\n            ELSE NULL\n        END AS tagesabweichung\n    FROM historical_metrics h\n    LEFT JOIN last_day_metrics l ON h.Kraftwerk = l.Kraftwerk\n)\n\nSELECT\n    h.Kraftwerk,\n    h.durchschnittliche_grundlast,\n    h.durchschnittliche_spitzenlast,\n    h.durchschnittliche_gesamtlast_pro_tag,\n    h.quote_spitzenlasten_prozent,\n    h.quote_ruecklaeufige_zaehlerstaende_prozent,\n    l.erwartete_leistung,\n    l.tagesabweichung\nFROM historical_metrics h\nLEFT JOIN last_day_deviation l ON h.Kraftwerk = l.Kraftwerk", "relation_name": "`gasag-465208`.`raw`.`kraftwerke_metrics`", "batch_results": null}], "elapsed_time": 1.7491559982299805, "args": {"require_batched_execution_for_custom_microbatch_strategy": false, "log_format": "default", "populate_cache": true, "quiet": false, "upload_to_artifacts_ingest_api": false, "invocation_command": "dbt docs generate", "log_format_file": "debug", "compile": true, "project_dir": "/home/anton/code/gasag/dbt_gasag", "log_file_max_bytes": 10485760, "cache_selected_only": false, "print": true, "macro_debugging": false, "state_modified_compare_more_unrendered_values": false, "partial_parse": true, "strict_mode": false, "show_all_deprecations": false, "log_level": "info", "source_freshness_run_project_hooks": true, "validate_macro_args": false, "vars": {}, "version_check": true, "partial_parse_file_diff": true, "static": false, "printer_width": 80, "profiles_dir": "/home/anton/.dbt", "warn_error_options": {"error": [], "warn": [], "silence": []}, "use_colors": true, "log_level_file": "debug", "which": "generate", "introspect": true, "select": [], "show_resource_report": false, "require_resource_names_without_spaces": true, "favor_state": false, "log_path": "/home/anton/code/gasag/dbt_gasag/logs", "require_nested_cumulative_type_params": false, "indirect_selection": "eager", "require_explicit_package_overrides_for_builtin_materializations": true, "skip_nodes_if_on_run_start_fails": false, "static_parser": true, "use_fast_test_edges": false, "use_colors_file": true, "defer": false, "send_anonymous_usage_stats": true, "require_all_warnings_handled_by_warn_error": false, "empty_catalog": false, "require_yaml_configuration_for_mf_time_spines": false, "write_json": true, "exclude": [], "state_modified_compare_vars": false}}